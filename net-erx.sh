#!/bin/bash

# Check for sudo
if [ "$EUID" -ne 0 ]; then
  echo "Please run this script with sudo."
  exit 1
fi

# Validate IP address
validate_ip() {
  local ip=$1
  if [[ $ip =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    IFS='.' read -ra octets <<< "$ip"
    for octet in "${octets[@]}"; do
      if (( octet < 0 || octet > 255 )); then
        return 1
      fi
    done
    return 0
  fi
  return 1
}

# Validate CIDR notation
validate_cidr() {
  local cidr=$1
  local ip="${cidr%%/*}"
  local prefix="${cidr##*/}"

  validate_ip "$ip" || return 1
  [[ "$prefix" =~ ^[0-9]+$ ]] && (( prefix >= 1 && prefix <= 32 )) || return 1
  return 0
}

# Prompt with default
get_input_with_default() {
  local prompt=$1
  local default=$2
  read -p "$prompt [$default]: " input </dev/tty
  echo "${input:-$default}"
}

# Yes/No prompt
get_yes_no() {
  local prompt=$1
  local default=$2
  while true; do
    read -p "$prompt (y/n) [$default]: " input </dev/tty
    input=${input:-$default}
    case $input in
      [Yy]*) echo "yes"; return ;;
      [Nn]*) echo "no"; return ;;
      *) echo "Please answer yes or no." ;;
    esac
  done
}

echo "=== Netplan Static IP Configuration Tool ==="
echo

netplan_dir="/etc/netplan"
netplan_files=($(ls $netplan_dir/*.yaml 2>/dev/null))

if [ ${#netplan_files[@]} -eq 0 ]; then
  selected_file="$netplan_dir/01-netcfg.yaml"
  echo "network:" > "$selected_file"
  echo "  version: 2" >> "$selected_file"
  echo "  ethernets:" >> "$selected_file"
  echo "Created: $selected_file"
else
  selected_file="${netplan_files[0]}"
  echo "Using configuration file: $selected_file"
fi
echo

# Detect interfaces directly under "ethernets:"
interfaces=()
while IFS= read -r line; do
  if [[ $line =~ ^[[:space:]]{4}([a-zA-Z0-9_-]+):$ ]]; then
    interfaces+=("${BASH_REMATCH[1]}")
  fi
done < <(grep -A50 "ethernets:" "$selected_file")

# Handle empty or broken config
if [ ${#interfaces[@]} -eq 0 ]; then
  echo "No valid interfaces found in the file. Detecting system interfaces..."
  interfaces=($(ip -o link show | awk -F': ' '{print $2}' | grep -v lo))
fi

# Select interface if more than one
if [ ${#interfaces[@]} -eq 1 ]; then
  interface=${interfaces[0]}
else
  echo "Available interfaces:"
  for i in "${!interfaces[@]}"; do
    echo "  $((i+1)). ${interfaces[$i]}"
  done
  while true; do
    read -p "Select an interface (1-${#interfaces[@]}): " idx
    if [[ "$idx" =~ ^[0-9]+$ ]] && (( idx >= 1 && idx <= ${#interfaces[@]} )); then
      interface="${interfaces[$((idx-1))]}"
      break
    else
      echo "Invalid selection."
    fi
  done
fi

echo "Configuring: $interface"
echo

# DHCP or Static
dhcp_enabled=$(get_yes_no "Enable DHCP?" "n")

addresses=()
gateway=""
nameservers=()
search_domains=()

if [ "$dhcp_enabled" = "no" ]; then
  while true; do
    read -p "Enter IP (CIDR) (e.g. 192.168.1.100/24): " ip_cidr
    validate_cidr "$ip_cidr" && addresses+=("$ip_cidr") && break
    echo "Invalid CIDR."
  done

  while true; do
    read -p "Gateway IP: " gateway
    validate_ip "$gateway" && break
    echo "Invalid IP."
  done

  echo "DNS servers (leave empty to finish):"
  while true; do
    read -p "DNS: " dns
    [ -z "$dns" ] && break
    validate_ip "$dns" && nameservers+=("$dns") || echo "Invalid DNS IP."
  done

  if [ ${#nameservers[@]} -eq 0 ]; then
    nameservers=("8.8.8.8" "8.8.4.4")
  fi

  if [ "$(get_yes_no "Add search domains?" "n")" = "yes" ]; then
    while true; do
      read -p "Search domain: " domain
      [ -z "$domain" ] && break
      search_domains+=("$domain")
    done
  fi
fi

# Generate temp config
temp_file=$(mktemp)
cat > "$temp_file" <<EOF
# Generated by Netplan script
network:
  version: 2
  ethernets:
    $interface:
EOF

if [ "$dhcp_enabled" = "yes" ]; then
  echo "      dhcp4: true" >> "$temp_file"
else
  echo "      dhcp4: false" >> "$temp_file"
  echo "      addresses:" >> "$temp_file"
  for addr in "${addresses[@]}"; do
    echo "        - $addr" >> "$temp_file"
  done
  echo "      routes:" >> "$temp_file"
  echo "        - to: default" >> "$temp_file"
  echo "          via: $gateway" >> "$temp_file"
  echo "      nameservers:" >> "$temp_file"
  echo "        addresses:" >> "$temp_file"
  for ns in "${nameservers[@]}"; do
    echo "          - $ns" >> "$temp_file"
  done
  if [ ${#search_domains[@]} -gt 0 ]; then
    echo "        search:" >> "$temp_file"
    for sd in "${search_domains[@]}"; do
      echo "          - $sd" >> "$temp_file"
    done
  fi
fi

# Show and apply
echo
echo "===== New Configuration ====="
cat "$temp_file"
echo "============================="
echo

cp "$temp_file" "$selected_file"
rm "$temp_file"
echo "Saved to: $selected_file"

if [ "$(get_yes_no "Apply now?" "y")" = "yes" ]; then
  netplan apply && echo "Applied successfully." || echo "Error applying configuration."
  ip addr show "$interface"
else
  echo "Run 'sudo netplan apply' to activate changes."
fi

echo "Done."
